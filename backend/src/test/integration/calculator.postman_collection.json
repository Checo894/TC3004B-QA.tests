{
	"info": {
		"_postman_id": "6d10c8d6-6e84-4b21-8c8c-4a109283b26a",
		"name": "calculator",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "34142305"
	},
	"item": [
		{
			"name": "add",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.result).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"La respuesta es JSON y el resultado de la resta es correcto\", function () {\r",
							"    pm.response.to.have.status(200); // Verifica que la respuesta sea exitosa (c칩digo 200)\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\"); // Verifica que la respuesta sea JSON\r",
							"\r",
							"    var jsonData = pm.response.json(); // Parsea la respuesta JSON\r",
							"\r",
							"    // Obtiene los valores de num1 y num2 desde los par치metros de la URL\r",
							"    var num1 = parseFloat(pm.request.url.query.get('num1'));\r",
							"    var num2 = parseFloat(pm.request.url.query.get('num2'));\r",
							"\r",
							"    // Calcula el resultado esperado\r",
							"    var expectedResult = `Result: ${num1 + num2}.0`; // Ajusta el formato de salida\r",
							"\r",
							"    // Verifica que el objeto tenga la clave 'result' con el valor esperado\r",
							"    pm.expect(jsonData).to.have.property(\"result\");\r",
							"    pm.expect(jsonData.result).to.equal(expectedResult);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/add?num1=1&num2=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"add"
					],
					"query": [
						{
							"key": "num1",
							"value": "1"
						},
						{
							"key": "num2",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "sub",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.result).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"La respuesta es JSON y el resultado de la resta es correcto\", function () {\r",
							"    pm.response.to.have.status(200); // Verifica que la respuesta sea exitosa (c칩digo 200)\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\"); // Verifica que la respuesta sea JSON\r",
							"\r",
							"    var jsonData = pm.response.json(); // Parsea la respuesta JSON\r",
							"\r",
							"    // Obtiene los valores de num1 y num2 desde los par치metros de la URL\r",
							"    var num1 = parseFloat(pm.request.url.query.get('num1'));\r",
							"    var num2 = parseFloat(pm.request.url.query.get('num2'));\r",
							"\r",
							"    // Calcula el resultado esperado\r",
							"    var expectedResult = `Result: ${num1 - num2}.0`; // Ajusta el formato de salida\r",
							"\r",
							"    // Verifica que el objeto tenga la clave 'result' con el valor esperado\r",
							"    pm.expect(jsonData).to.have.property(\"result\");\r",
							"    pm.expect(jsonData.result).to.equal(expectedResult);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/sub?num1=1&num2=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"sub"
					],
					"query": [
						{
							"key": "num1",
							"value": "1"
						},
						{
							"key": "num2",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	]
}